Author: Sam Ruhe
Class: CSE 241, Databases, Spring 2020

================ Please fit this on a single line ================

Go to main project folder sar420ruhe/sar420:

Build:
    Use included Makefile, type
        $ make
    to build the executable.

Clean:
    Use included Makefile, type
        $ make clean
    to remove all class files

Run:
    Use included Makefile, type
        $ make run
    or type
        $ java -jar sar420.jar


Data Generation:
    The initial data I used was generated by
    https://www.generatedata.com/. I modified foreign key 
    constraints to the data by hand. After I had my final ER 
    diagram I needed to redo some of the data so I modified 
    the smaller parts by hand and wrote a program for the larger 
    parts (the transaction data). That program as well as all of 
    my insert statements are included.

About:
    The project loads up from the Main class which asks the user to 
    select an interface. From there I have split up the interfaces 
    into seperate classes, which can be found in the sar420/interfaces/ 
    folder. Beyond the main interfaces, the helper functions were 
    split into classes that tried to make use of reusable code when 
    possible. These classes can be found in sar420/interfaces/items/ 
    folder. Additionally, there is a class in io/ that handles all 
    of the input and much of the printing.

Interfaces:
    Required:
        Deposit/Withdraw:
            related files:
                interfaces.DepositWithdraw
                interfaces.items.ATMTransaction
                interfaces.items.TellerTransaction
                interfaces.items.CheckBalance
                interfaces.items.Deposit
                interfaces.items.Withdraw
            This interface allows a user to select if they would like 
            to use an ATM or a teller to make a withdraw or deposit. On 
            selection of an ATM or teller, a list of locations is displayed 
            and the user is asked to select the location they would like to 
            use. Additionally, the transaction information is added to the 
            corresponding table when a deposit or withdraw is made. The timestamp
            is input with the current system time (sysdate) of the Oracle database.
                ATM:
                    Selecting the ATM takes the user to another interface where 
                    they are asked for their card info. Once their account is 
                    verified, the user can choose to check their balance or make 
                    a withdraw. Withdraws at the ATM are limited to values 
                    divisible by 20 and cannot run the account balance below $0.
                    After a successful withdraw, the user is taken back to the 
                    main Deposit/Withdraw interface again.
                Teller:
                    Selecting the teller asks the user for their customer 
                    identification number. Then all of this user's accounts 
                    will be displayed and the user will be asked to select 
                    which account they would like to use. Then they will be 
                    asked if they would like to make a deposit or withdraw. On 
                    completion the new account balance is displayed and the user 
                    is taken back to the Deposit/Withdraw interface again.
        
        Purchases:
            related files:
                interfaces.Purchases
                interfaces.items.CardPurchase
            This interface allows the user to select a location for the purchase 
            and then decide if they would like to use a credit or debit card. The 
            user is then asked for card information followed by the amount. If the 
            card cannot be found, the user is asked to cancel or select another card. 
            If the purchase is successful, the user is taken back to the main interface 
            selection. Additionally, the transaction is added to the correct table on 
            completion of the purchase.

        Open Account:
            related files:
                interfaces.OpenAccount
                interfaces.items.CreateAccount
            This interface allows a user to open a new checking or savings account. 
            If the user is already a customer of Nickel, then they can enter their 
            customer identification. Otherwise, they continue and they will be asked 
            for personal information, (name, address). This information will be inserted 
            into corresponding customer and address tables. Then the user can select if 
            they want to open a checking or savings account followed by entering the 
            amount they would like to initialize the account with. When the account is 
            created, the new account information is displayed before taking the user back 
            to the main interface selection.

Other Info:
    There are many menu selections used throughout. A number is used to select an option, 
    or the letter 'q' can be typed to completely exit. Also, most menus allow for 'b' to 
    be typed to go back to the previous menu. For transactions that require multiple 
    modifications, such as inserting a new user, inserting a new address for that user, and 
    then inserting the new account information, auto-commit is disabled and information is 
    only commited if every insert/update/delete was successful. Otherwise, all of the 
    attempted transactions are rolled back. Auto-commit is then turned back on so for single 
    update attempts, it is commited automatically.

PL/SQL:
    Triggers:
        Multiple triggers are defined for keeping account information consistent
        updateSavings:
            Updates the balance in savings_acct when the corresponding balance in account 
            is changed
        updateChecking:
            Updates the balance in checking_acct when the corresponding balance in account 
            is changed
        addToAccount:
            After a new checking account is added to the table checking_acct, adds the 
            correct information to a new account in the table account
        addToAccountFromSavings:
            After a new savings account is added to the table savings_acct, adds the 
            correct information to a new account in the table account

ER Diagram:
    I have made some minor modifications to the ER Diagram that I submitted. I added 
    two attributes to credit_card and modified branch and transactions.